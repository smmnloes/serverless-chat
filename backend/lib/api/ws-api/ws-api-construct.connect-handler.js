"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
const dynamodb_1 = require("../../util/dynamodb");
const handler = async (event) => {
    var _a;
    console.log(JSON.stringify(event, null, 4));
    const connectionTable = process.env.CONNECTION_TABLE_NAME || (() => { throw new Error('No connection table name supplied'); })();
    const connectingUsername = (_a = event.queryStringParameters) === null || _a === void 0 ? void 0 : _a.name;
    const currentConnectionId = event.requestContext.connectionId;
    const documentClient = new aws_sdk_1.DynamoDB.DocumentClient({});
    // Send user connected Message to all users
    const usernameExists = await userNameAlreadyExists(connectingUsername, connectionTable, documentClient);
    if (usernameExists) {
        const errorMessage = `User with name '${connectingUsername}' already exists`;
        console.log(errorMessage);
        return {
            statusCode: 409,
            body: JSON.stringify({ message: errorMessage })
        };
    }
    await sendConnectMessageToAll(connectionTable, currentConnectionId, connectingUsername);
    await documentClient.put({ TableName: connectionTable, Item: { connectionId: currentConnectionId, name: connectingUsername } }).promise();
    return { statusCode: 200 };
};
exports.handler = handler;
async function sendConnectMessageToAll(connectionTable, currentConnectionId, connectingUsername) {
    const callBackUrl = process.env.CALLBACK_URL || (() => {
        throw new Error('No callback url supplied');
    })();
    const callbackAPI = new aws_sdk_1.ApiGatewayManagementApi({
        apiVersion: '2018-11-29', endpoint: callBackUrl
    });
    const connectedClientIds = (await (0, dynamodb_1.scanComplete)({ TableName: connectionTable })).map((item) => item.connectionId);
    // remove currently connected user from list (not connected yet)
    const connectedClientIdsWithoutCurrentlyConnectingUser = connectedClientIds.filter(id => id !== currentConnectionId);
    console.log("Sending connect message to " + JSON.stringify(connectedClientIdsWithoutCurrentlyConnectingUser));
    await Promise.all(connectedClientIdsWithoutCurrentlyConnectingUser.map(connectionId => callbackAPI.postToConnection({
        ConnectionId: connectionId, Data: JSON.stringify({
            messageType: 'USER_CONNECTED', username: connectingUsername
        })
    }).promise()));
}
async function userNameAlreadyExists(connectingUsername, connectionTable, documentClient) {
    console.log('Checking if user already exists');
    const usersForName = (await documentClient.query({
        TableName: connectionTable,
        IndexName: 'NameIndex',
        KeyConditionExpression: '#n = :n',
        ExpressionAttributeNames: { '#n': 'name' },
        ExpressionAttributeValues: { ':n': connectingUsername }
    }).promise()).Items;
    return (usersForName !== undefined && usersForName.length > 0);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3MtYXBpLWNvbnN0cnVjdC5jb25uZWN0LWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3cy1hcGktY29uc3RydWN0LmNvbm5lY3QtaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxxQ0FBNEQ7QUFHNUQsa0RBQW1EO0FBRzVDLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUEyQixFQUFvQyxFQUFFOztJQUMzRixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzNDLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0lBRS9ILE1BQU0sa0JBQWtCLEdBQUcsTUFBQSxLQUFLLENBQUMscUJBQXFCLDBDQUFFLElBQUksQ0FBQTtJQUM1RCxNQUFNLG1CQUFtQixHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFBO0lBQzdELE1BQU0sY0FBYyxHQUFHLElBQUksa0JBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUE7SUFJdEQsMkNBQTJDO0lBRTNDLE1BQU0sY0FBYyxHQUFHLE1BQU0scUJBQXFCLENBQUMsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLGNBQWMsQ0FBQyxDQUFBO0lBQ3ZHLElBQUksY0FBYyxFQUFFO1FBQ2hCLE1BQU0sWUFBWSxHQUFHLG1CQUFtQixrQkFBa0Isa0JBQWtCLENBQUM7UUFDN0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUN6QixPQUFPO1lBQ0gsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsQ0FBQztTQUNsRCxDQUFBO0tBQ0o7SUFDRCxNQUFNLHVCQUF1QixDQUFDLGVBQWUsRUFBRSxtQkFBbUIsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3hGLE1BQU0sY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLEVBQUUsWUFBWSxFQUFFLG1CQUFtQixFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBeUIsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDaEssT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUMvQixDQUFDLENBQUE7QUF4QlksUUFBQSxPQUFPLFdBd0JuQjtBQUVELEtBQUssVUFBVSx1QkFBdUIsQ0FBQyxlQUF1QixFQUFFLG1CQUF1QyxFQUFFLGtCQUFzQztJQUUzSSxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNsRCxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUE7SUFDL0MsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtJQUNKLE1BQU0sV0FBVyxHQUFHLElBQUksaUNBQXVCLENBQUM7UUFDNUMsVUFBVSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsV0FBVztLQUNsRCxDQUFDLENBQUM7SUFFSCxNQUFNLGtCQUFrQixHQUFHLENBQUMsTUFBTSxJQUFBLHVCQUFZLEVBQUMsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQWtCLEVBQUUsRUFBRSxDQUFFLElBQTRCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEosZ0VBQWdFO0lBQ2hFLE1BQU0sZ0RBQWdELEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLG1CQUFtQixDQUFDLENBQUM7SUFDckgsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGdEQUFnRCxDQUFDLENBQUMsQ0FBQTtJQUM3RyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0RBQWdELENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDO1FBQ2hILFlBQVksRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDN0MsV0FBVyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxrQkFBa0I7U0FDckMsQ0FBQztLQUM5QixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ25CLENBQUM7QUFFRCxLQUFLLFVBQVUscUJBQXFCLENBQUMsa0JBQXNDLEVBQUUsZUFBdUIsRUFBRSxjQUF1QztJQUN6SSxPQUFPLENBQUMsR0FBRyxDQUFDLGlDQUFpQyxDQUFDLENBQUE7SUFDOUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxNQUFNLGNBQWMsQ0FBQyxLQUFLLENBQUM7UUFDN0MsU0FBUyxFQUFFLGVBQWU7UUFDMUIsU0FBUyxFQUFFLFdBQVc7UUFDdEIsc0JBQXNCLEVBQUUsU0FBUztRQUNqQyx3QkFBd0IsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7UUFDMUMseUJBQXlCLEVBQUUsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUU7S0FDMUQsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFBO0lBQ25CLE9BQU8sQ0FBQyxZQUFZLEtBQUssU0FBUyxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDbEUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUdhdGV3YXlQcm94eVJlc3VsdFYyLCBBUElHYXRld2F5UHJveHlFdmVudCB9IGZyb20gJ2F3cy1sYW1iZGEnXG5pbXBvcnQgeyBBcGlHYXRld2F5TWFuYWdlbWVudEFwaSwgRHluYW1vREIgfSBmcm9tICdhd3Mtc2RrJztcbmltcG9ydCB7IEF0dHJpYnV0ZU1hcCB9IGZyb20gJ2F3cy1zZGsvY2xpZW50cy9keW5hbW9kYic7XG5pbXBvcnQgeyBDb25uZWN0aW9uVGFibGVJdGVtIH0gZnJvbSAnLi4vLi4vZGF0YW1vZGVsL2Nvbm5lY3Rpb24tdGFibGUnO1xuaW1wb3J0IHsgc2NhbkNvbXBsZXRlIH0gZnJvbSAnLi4vLi4vdXRpbC9keW5hbW9kYic7XG5pbXBvcnQgeyBVc2VyQ29ubmVjdGlvbk1lc3NhZ2UgfSBmcm9tICcuLi8uLi8uLi8uLi9jb21tb24vd2Vic29ja2V0LXR5cGVzL3VzZXItY29ubmVjdGlvbi1tZXNzYWdlJztcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFQSUdhdGV3YXlQcm94eUV2ZW50KTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHRWMj4gPT4ge1xuICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGV2ZW50LCBudWxsLCA0KSlcbiAgICBjb25zdCBjb25uZWN0aW9uVGFibGUgPSBwcm9jZXNzLmVudi5DT05ORUNUSU9OX1RBQkxFX05BTUUgfHwgKCgpID0+IHsgdGhyb3cgbmV3IEVycm9yKCdObyBjb25uZWN0aW9uIHRhYmxlIG5hbWUgc3VwcGxpZWQnKSB9KSgpXG5cbiAgICBjb25zdCBjb25uZWN0aW5nVXNlcm5hbWUgPSBldmVudC5xdWVyeVN0cmluZ1BhcmFtZXRlcnM/Lm5hbWVcbiAgICBjb25zdCBjdXJyZW50Q29ubmVjdGlvbklkID0gZXZlbnQucmVxdWVzdENvbnRleHQuY29ubmVjdGlvbklkXG4gICAgY29uc3QgZG9jdW1lbnRDbGllbnQgPSBuZXcgRHluYW1vREIuRG9jdW1lbnRDbGllbnQoe30pXG5cblxuICAgIFxuICAgIC8vIFNlbmQgdXNlciBjb25uZWN0ZWQgTWVzc2FnZSB0byBhbGwgdXNlcnNcbiAgICBcbiAgICBjb25zdCB1c2VybmFtZUV4aXN0cyA9IGF3YWl0IHVzZXJOYW1lQWxyZWFkeUV4aXN0cyhjb25uZWN0aW5nVXNlcm5hbWUsIGNvbm5lY3Rpb25UYWJsZSwgZG9jdW1lbnRDbGllbnQpXG4gICAgaWYgKHVzZXJuYW1lRXhpc3RzKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBVc2VyIHdpdGggbmFtZSAnJHtjb25uZWN0aW5nVXNlcm5hbWV9JyBhbHJlYWR5IGV4aXN0c2A7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yTWVzc2FnZSlcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDQwOSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogZXJyb3JNZXNzYWdlIH0pXG4gICAgICAgIH1cbiAgICB9XG4gICAgYXdhaXQgc2VuZENvbm5lY3RNZXNzYWdlVG9BbGwoY29ubmVjdGlvblRhYmxlLCBjdXJyZW50Q29ubmVjdGlvbklkLCBjb25uZWN0aW5nVXNlcm5hbWUpO1xuICAgIGF3YWl0IGRvY3VtZW50Q2xpZW50LnB1dCh7IFRhYmxlTmFtZTogY29ubmVjdGlvblRhYmxlLCBJdGVtOiB7IGNvbm5lY3Rpb25JZDogY3VycmVudENvbm5lY3Rpb25JZCwgbmFtZTogY29ubmVjdGluZ1VzZXJuYW1lIH0gYXMgQ29ubmVjdGlvblRhYmxlSXRlbSB9KS5wcm9taXNlKClcbiAgICByZXR1cm4geyBzdGF0dXNDb2RlOiAyMDAgfTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2VuZENvbm5lY3RNZXNzYWdlVG9BbGwoY29ubmVjdGlvblRhYmxlOiBzdHJpbmcsIGN1cnJlbnRDb25uZWN0aW9uSWQ6IHN0cmluZyB8IHVuZGVmaW5lZCwgY29ubmVjdGluZ1VzZXJuYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcblxuICAgIGNvbnN0IGNhbGxCYWNrVXJsID0gcHJvY2Vzcy5lbnYuQ0FMTEJBQ0tfVVJMIHx8ICgoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gY2FsbGJhY2sgdXJsIHN1cHBsaWVkJylcbiAgICB9KSgpXG4gICAgY29uc3QgY2FsbGJhY2tBUEkgPSBuZXcgQXBpR2F0ZXdheU1hbmFnZW1lbnRBcGkoe1xuICAgICAgICBhcGlWZXJzaW9uOiAnMjAxOC0xMS0yOScsIGVuZHBvaW50OiBjYWxsQmFja1VybFxuICAgIH0pO1xuXG4gICAgY29uc3QgY29ubmVjdGVkQ2xpZW50SWRzID0gKGF3YWl0IHNjYW5Db21wbGV0ZSh7IFRhYmxlTmFtZTogY29ubmVjdGlvblRhYmxlIH0pKS5tYXAoKGl0ZW06IEF0dHJpYnV0ZU1hcCkgPT4gKGl0ZW0gYXMgQ29ubmVjdGlvblRhYmxlSXRlbSkuY29ubmVjdGlvbklkKTtcbiAgICAvLyByZW1vdmUgY3VycmVudGx5IGNvbm5lY3RlZCB1c2VyIGZyb20gbGlzdCAobm90IGNvbm5lY3RlZCB5ZXQpXG4gICAgY29uc3QgY29ubmVjdGVkQ2xpZW50SWRzV2l0aG91dEN1cnJlbnRseUNvbm5lY3RpbmdVc2VyID0gY29ubmVjdGVkQ2xpZW50SWRzLmZpbHRlcihpZCA9PiBpZCAhPT0gY3VycmVudENvbm5lY3Rpb25JZCk7XG4gICAgY29uc29sZS5sb2coXCJTZW5kaW5nIGNvbm5lY3QgbWVzc2FnZSB0byBcIiArIEpTT04uc3RyaW5naWZ5KGNvbm5lY3RlZENsaWVudElkc1dpdGhvdXRDdXJyZW50bHlDb25uZWN0aW5nVXNlcikpXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoY29ubmVjdGVkQ2xpZW50SWRzV2l0aG91dEN1cnJlbnRseUNvbm5lY3RpbmdVc2VyLm1hcChjb25uZWN0aW9uSWQgPT4gY2FsbGJhY2tBUEkucG9zdFRvQ29ubmVjdGlvbih7XG4gICAgICAgIENvbm5lY3Rpb25JZDogY29ubmVjdGlvbklkLCBEYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBtZXNzYWdlVHlwZTogJ1VTRVJfQ09OTkVDVEVEJywgdXNlcm5hbWU6IGNvbm5lY3RpbmdVc2VybmFtZVxuICAgICAgICB9IGFzIFVzZXJDb25uZWN0aW9uTWVzc2FnZSlcbiAgICB9KS5wcm9taXNlKCkpKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXNlck5hbWVBbHJlYWR5RXhpc3RzKGNvbm5lY3RpbmdVc2VybmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkLCBjb25uZWN0aW9uVGFibGU6IHN0cmluZywgZG9jdW1lbnRDbGllbnQ6IER5bmFtb0RCLkRvY3VtZW50Q2xpZW50KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc29sZS5sb2coJ0NoZWNraW5nIGlmIHVzZXIgYWxyZWFkeSBleGlzdHMnKVxuICAgIGNvbnN0IHVzZXJzRm9yTmFtZSA9IChhd2FpdCBkb2N1bWVudENsaWVudC5xdWVyeSh7XG4gICAgICAgIFRhYmxlTmFtZTogY29ubmVjdGlvblRhYmxlLFxuICAgICAgICBJbmRleE5hbWU6ICdOYW1lSW5kZXgnLFxuICAgICAgICBLZXlDb25kaXRpb25FeHByZXNzaW9uOiAnI24gPSA6bicsXG4gICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczogeyAnI24nOiAnbmFtZScgfSxcbiAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogeyAnOm4nOiBjb25uZWN0aW5nVXNlcm5hbWUgfVxuICAgIH0pLnByb21pc2UoKSkuSXRlbXNcbiAgICByZXR1cm4gKHVzZXJzRm9yTmFtZSAhPT0gdW5kZWZpbmVkICYmIHVzZXJzRm9yTmFtZS5sZW5ndGggPiAwKVxufSJdfQ==
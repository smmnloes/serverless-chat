"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
const dynamodb_1 = require("../../util/dynamodb");
const handler = async (event) => {
    console.log(JSON.stringify(event, null, 4));
    const connectionTable = process.env.CONNECTION_TABLE_NAME || (() => { throw new Error('No connection table name supplied'); })();
    const documentClient = new aws_sdk_1.DynamoDB.DocumentClient();
    const currentDisconnectionId = event.requestContext.connectionId;
    await sendDisconnectMessageToAll(documentClient, connectionTable, currentDisconnectionId);
    await documentClient.delete({ TableName: connectionTable, Key: { connectionId: currentDisconnectionId } }).promise();
    return {
        statusCode: 200
    };
};
exports.handler = handler;
async function sendDisconnectMessageToAll(documentClient, connectionTable, currentDisconnectionId) {
    var _a;
    console.log("getting name for connectionId " + currentDisconnectionId);
    const disconnectingUserName = (_a = (await documentClient.get({ TableName: connectionTable, Key: { connectionId: currentDisconnectionId } }).promise()).Item) === null || _a === void 0 ? void 0 : _a.name;
    console.log("disconnecting user name: " + disconnectingUserName);
    if (disconnectingUserName) {
        // Send user connected Message to all users
        const callBackUrl = process.env.CALLBACK_URL || (() => {
            throw new Error('No callback url supplied');
        })();
        const callbackAPI = new aws_sdk_1.ApiGatewayManagementApi({
            apiVersion: '2018-11-29', endpoint: callBackUrl
        });
        const connectedClientIds = (await (0, dynamodb_1.scanComplete)({ TableName: connectionTable })).map((item) => item.connectionId);
        // remove currently disconnecting user from list
        const connectedIdsWithoutCurrentlyDisconnectingUser = connectedClientIds.filter(id => id !== currentDisconnectionId);
        console.log("Sending disconnect message to " + JSON.stringify(connectedIdsWithoutCurrentlyDisconnectingUser));
        await Promise.all(connectedIdsWithoutCurrentlyDisconnectingUser.map(connectionId => callbackAPI.postToConnection({
            ConnectionId: connectionId, Data: JSON.stringify({
                messageType: 'USER_DISCONNECTED', username: disconnectingUserName
            })
        }).promise()));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3MtYXBpLWNvbnN0cnVjdC5kaXNjb25uZWN0LWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3cy1hcGktY29uc3RydWN0LmRpc2Nvbm5lY3QtaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxxQ0FBNEQ7QUFJNUQsa0RBQW1EO0FBRzVDLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUEyQixFQUFvQyxFQUFFO0lBQzNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDM0MsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7SUFFL0gsTUFBTSxjQUFjLEdBQUcsSUFBSSxrQkFBUSxDQUFDLGNBQWMsRUFBRSxDQUFBO0lBQ3BELE1BQU0sc0JBQXNCLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUM7SUFFakUsTUFBTSwwQkFBMEIsQ0FBQyxjQUFjLEVBQUUsZUFBZSxFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFDMUYsTUFBTSxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxHQUFHLEVBQUUsRUFBRSxZQUFZLEVBQUUsc0JBQXNCLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7SUFHcEgsT0FBTztRQUNILFVBQVUsRUFBRSxHQUFHO0tBQ2xCLENBQUE7QUFFTCxDQUFDLENBQUE7QUFmWSxRQUFBLE9BQU8sV0FlbkI7QUFFRCxLQUFLLFVBQVUsMEJBQTBCLENBQUMsY0FBdUMsRUFBRSxlQUF1QixFQUFFLHNCQUEwQzs7SUFDbEosT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsR0FBRyxzQkFBc0IsQ0FBQyxDQUFBO0lBQ3RFLE1BQU0scUJBQXFCLEdBQVcsTUFBQSxDQUFDLE1BQU0sY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsR0FBRyxFQUFFLEVBQUUsWUFBWSxFQUFFLHNCQUFzQixFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSwwQ0FBRSxJQUFJLENBQUE7SUFDcEssT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsR0FBRyxxQkFBcUIsQ0FBQyxDQUFBO0lBRWhFLElBQUkscUJBQXFCLEVBQUU7UUFDdkIsMkNBQTJDO1FBQzNDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ2xELE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtRQUMvQyxDQUFDLENBQUMsRUFBRSxDQUFBO1FBQ0osTUFBTSxXQUFXLEdBQUcsSUFBSSxpQ0FBdUIsQ0FBQztZQUM1QyxVQUFVLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxXQUFXO1NBQ2xELENBQUMsQ0FBQztRQUNILE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxNQUFNLElBQUEsdUJBQVksRUFBQyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBa0IsRUFBRSxFQUFFLENBQUUsSUFBNEIsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN4SixnREFBZ0Q7UUFDaEQsTUFBTSw2Q0FBNkMsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssc0JBQXNCLENBQUMsQ0FBQztRQUNySCxPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsNkNBQTZDLENBQUMsQ0FBQyxDQUFBO1FBQzdHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUM7WUFDN0csWUFBWSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDN0MsV0FBVyxFQUFFLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxxQkFBcUI7YUFDM0MsQ0FBQztTQUM5QixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ2xCO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUdhdGV3YXlQcm94eUV2ZW50LCBBUElHYXRld2F5UHJveHlSZXN1bHRWMiB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgQXBpR2F0ZXdheU1hbmFnZW1lbnRBcGksIER5bmFtb0RCIH0gZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgeyBBdHRyaWJ1dGVNYXAgfSBmcm9tICdhd3Mtc2RrL2NsaWVudHMvZHluYW1vZGInO1xuaW1wb3J0IHsgVXNlckNvbm5lY3Rpb25NZXNzYWdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29tbW9uL3dlYnNvY2tldC10eXBlcy91c2VyLWNvbm5lY3Rpb24tbWVzc2FnZSc7XG5pbXBvcnQgeyBDb25uZWN0aW9uVGFibGVJdGVtIH0gZnJvbSAnLi4vLi4vZGF0YW1vZGVsL2Nvbm5lY3Rpb24tdGFibGUnO1xuaW1wb3J0IHsgc2NhbkNvbXBsZXRlIH0gZnJvbSAnLi4vLi4vdXRpbC9keW5hbW9kYic7XG5cblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFQSUdhdGV3YXlQcm94eUV2ZW50KTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHRWMj4gPT4ge1xuICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGV2ZW50LCBudWxsLCA0KSlcbiAgICBjb25zdCBjb25uZWN0aW9uVGFibGUgPSBwcm9jZXNzLmVudi5DT05ORUNUSU9OX1RBQkxFX05BTUUgfHwgKCgpID0+IHsgdGhyb3cgbmV3IEVycm9yKCdObyBjb25uZWN0aW9uIHRhYmxlIG5hbWUgc3VwcGxpZWQnKSB9KSgpXG5cbiAgICBjb25zdCBkb2N1bWVudENsaWVudCA9IG5ldyBEeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpXG4gICAgY29uc3QgY3VycmVudERpc2Nvbm5lY3Rpb25JZCA9IGV2ZW50LnJlcXVlc3RDb250ZXh0LmNvbm5lY3Rpb25JZDtcblxuICAgIGF3YWl0IHNlbmREaXNjb25uZWN0TWVzc2FnZVRvQWxsKGRvY3VtZW50Q2xpZW50LCBjb25uZWN0aW9uVGFibGUsIGN1cnJlbnREaXNjb25uZWN0aW9uSWQpO1xuICAgIGF3YWl0IGRvY3VtZW50Q2xpZW50LmRlbGV0ZSh7IFRhYmxlTmFtZTogY29ubmVjdGlvblRhYmxlLCBLZXk6IHsgY29ubmVjdGlvbklkOiBjdXJyZW50RGlzY29ubmVjdGlvbklkIH0gfSkucHJvbWlzZSgpXG4gICAgXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXNDb2RlOiAyMDBcbiAgICB9XG5cbn1cblxuYXN5bmMgZnVuY3Rpb24gc2VuZERpc2Nvbm5lY3RNZXNzYWdlVG9BbGwoZG9jdW1lbnRDbGllbnQ6IER5bmFtb0RCLkRvY3VtZW50Q2xpZW50LCBjb25uZWN0aW9uVGFibGU6IHN0cmluZywgY3VycmVudERpc2Nvbm5lY3Rpb25JZDogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS5sb2coXCJnZXR0aW5nIG5hbWUgZm9yIGNvbm5lY3Rpb25JZCBcIiArIGN1cnJlbnREaXNjb25uZWN0aW9uSWQpXG4gICAgY29uc3QgZGlzY29ubmVjdGluZ1VzZXJOYW1lOiBzdHJpbmcgPSAoYXdhaXQgZG9jdW1lbnRDbGllbnQuZ2V0KHsgVGFibGVOYW1lOiBjb25uZWN0aW9uVGFibGUsIEtleTogeyBjb25uZWN0aW9uSWQ6IGN1cnJlbnREaXNjb25uZWN0aW9uSWQgfSB9KS5wcm9taXNlKCkpLkl0ZW0/Lm5hbWVcbiAgICBjb25zb2xlLmxvZyhcImRpc2Nvbm5lY3RpbmcgdXNlciBuYW1lOiBcIiArIGRpc2Nvbm5lY3RpbmdVc2VyTmFtZSlcblxuICAgIGlmIChkaXNjb25uZWN0aW5nVXNlck5hbWUpIHtcbiAgICAgICAgLy8gU2VuZCB1c2VyIGNvbm5lY3RlZCBNZXNzYWdlIHRvIGFsbCB1c2Vyc1xuICAgICAgICBjb25zdCBjYWxsQmFja1VybCA9IHByb2Nlc3MuZW52LkNBTExCQUNLX1VSTCB8fCAoKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBjYWxsYmFjayB1cmwgc3VwcGxpZWQnKVxuICAgICAgICB9KSgpXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrQVBJID0gbmV3IEFwaUdhdGV3YXlNYW5hZ2VtZW50QXBpKHtcbiAgICAgICAgICAgIGFwaVZlcnNpb246ICcyMDE4LTExLTI5JywgZW5kcG9pbnQ6IGNhbGxCYWNrVXJsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjb25uZWN0ZWRDbGllbnRJZHMgPSAoYXdhaXQgc2NhbkNvbXBsZXRlKHsgVGFibGVOYW1lOiBjb25uZWN0aW9uVGFibGUgfSkpLm1hcCgoaXRlbTogQXR0cmlidXRlTWFwKSA9PiAoaXRlbSBhcyBDb25uZWN0aW9uVGFibGVJdGVtKS5jb25uZWN0aW9uSWQpO1xuICAgICAgICAvLyByZW1vdmUgY3VycmVudGx5IGRpc2Nvbm5lY3RpbmcgdXNlciBmcm9tIGxpc3RcbiAgICAgICAgY29uc3QgY29ubmVjdGVkSWRzV2l0aG91dEN1cnJlbnRseURpc2Nvbm5lY3RpbmdVc2VyID0gY29ubmVjdGVkQ2xpZW50SWRzLmZpbHRlcihpZCA9PiBpZCAhPT0gY3VycmVudERpc2Nvbm5lY3Rpb25JZCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiU2VuZGluZyBkaXNjb25uZWN0IG1lc3NhZ2UgdG8gXCIgKyBKU09OLnN0cmluZ2lmeShjb25uZWN0ZWRJZHNXaXRob3V0Q3VycmVudGx5RGlzY29ubmVjdGluZ1VzZXIpKVxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChjb25uZWN0ZWRJZHNXaXRob3V0Q3VycmVudGx5RGlzY29ubmVjdGluZ1VzZXIubWFwKGNvbm5lY3Rpb25JZCA9PiBjYWxsYmFja0FQSS5wb3N0VG9Db25uZWN0aW9uKHtcbiAgICAgICAgICAgIENvbm5lY3Rpb25JZDogY29ubmVjdGlvbklkLCBEYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZVR5cGU6ICdVU0VSX0RJU0NPTk5FQ1RFRCcsIHVzZXJuYW1lOiBkaXNjb25uZWN0aW5nVXNlck5hbWVcbiAgICAgICAgICAgIH0gYXMgVXNlckNvbm5lY3Rpb25NZXNzYWdlKVxuICAgICAgICB9KS5wcm9taXNlKCkpKTtcbiAgICB9XG59XG4iXX0=
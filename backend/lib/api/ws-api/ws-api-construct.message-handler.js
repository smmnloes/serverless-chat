"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
const dynamodb_1 = require("../../util/dynamodb");
const crypto_1 = require("crypto");
const handler = async (event) => {
    console.log(JSON.stringify(event, null, 4));
    if (!event.body) {
        return {
            statusCode: 400, body: JSON.stringify({
                error: 'No message body'
            })
        };
    }
    const body = JSON.parse(event.body);
    const messageProps = body.messageProps;
    const incomingMessage = messageProps.message;
    const callBackUrl = process.env.CALLBACK_URL || (() => {
        throw new Error('No callback url supplied');
    })();
    const connectionTable = process.env.CONNECTION_TABLE_NAME || (() => {
        throw new Error('No connection table name supplied');
    })();
    const messagesTable = process.env.MESSAGES_TABLE_NAME || (() => {
        throw new Error('No messages table name supplied');
    })();
    const callbackAPI = new aws_sdk_1.ApiGatewayManagementApi({
        apiVersion: '2018-11-29', endpoint: callBackUrl
    });
    const documentClient = new aws_sdk_1.DynamoDB.DocumentClient();
    const sentAt = new Date().toISOString();
    let id = (0, crypto_1.randomUUID)();
    await documentClient.put({
        TableName: messagesTable, Item: {
            id, sentAt, from: messageProps.from, to: messageProps.to, message: incomingMessage
        }
    }).promise();
    if (messageProps.to === 'all') {
        return await sendToAll();
    }
    else {
        return await sendToOne();
    }
    async function sendToAll() {
        console.log('Querying connection ids');
        const connectedClientIds = (await (0, dynamodb_1.scanComplete)({ TableName: connectionTable })).map((item) => item.connectionId);
        console.log('Connection Ids: ' + connectedClientIds);
        console.log('Posting to connections');
        await Promise.all(connectedClientIds.map(connectionId => callbackAPI.postToConnection({
            ConnectionId: connectionId, Data: JSON.stringify({
                messageType: 'MESSAGE', messageProps: { from: messageProps.from, to: messageProps.to, message: incomingMessage, sentAt, id }
            })
        }).promise()));
        console.log('Posted to connections');
        return { statusCode: 200 };
    }
    async function sendToOne() {
        console.log('Querying connection id for name ' + messageProps.to);
        const items = (await documentClient
            .query({
            TableName: connectionTable,
            IndexName: 'NameIndex',
            KeyConditionExpression: '#n = :t',
            ExpressionAttributeNames: { '#n': 'name' },
            ExpressionAttributeValues: { ':t': messageProps.to }
        }).promise()).Items;
        if (items === undefined || items.length !== 1) {
            console.log('Error. Items retrieved was ' + items);
            return { statusCode: 500, body: JSON.stringify({ error: 'Could not match connectionID to name' }) };
        }
        const recipientConnectionId = items[0].connectionId;
        console.log('Recipient connection Id: ' + recipientConnectionId);
        console.log('Posting to connection');
        await callbackAPI.postToConnection({
            ConnectionId: recipientConnectionId, Data: JSON.stringify({
                messageType: 'MESSAGE', messageProps: { from: messageProps.from, to: messageProps.to, message: incomingMessage, sentAt, id }
            })
        }).promise();
        console.log('Posted to connections');
        return { statusCode: 200 };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,